/*
 * Copyright (C) 2016 hedede <haddayn@gmail.com>
 *
 * License LGPLv3 or later:
 * GNU Lesser GPL version 3 <http://gnu.org/licenses/lgpl-3.0.html>
 * This is free software: you are free to change and redistribute it.
 * There is NO WARRANTY, to the extent permitted by law.
 */
#ifndef Daedalus_CharType
#define Daedalus_CharType
#include <functional>
#include <daedalus/common/types.h>
namespace daedalus {
namespace characters {
/*!
 * Character categories
 */
enum Category {
	NameBegin     = 0b00000001,
	Numeric       = 0b00000010,
	Punctuation   = 0b00000100,
	Space         = 0b00001000,
	DaedalusName  = 0b00100000,
	UnicodeHead   = 0b01000000,
	UnicodeTail   = 0b10000000,
	Name          = NameBegin | DaedalusName | Numeric,
	TokenBegin    = NameBegin | Numeric | Punctuation,
};

//constexpr char_count = std::numeric_limits<char>::digits;
/*!
 * Mapping of characters to categories
 */
u8 types[] = {
//0  SOH  STX  ETX  EOT  ENQ  ACK  BEL  BS    \t   \n   \v   \f   \r   SO   SI
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00,
//DLE DC1  DC2  DC2  DC4  NAK  SYN  ETB  CAN  EM   SUB  ESC  FS   GS   RS   US
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//     !    "    #    $    %    &    '    (    )    *    +    ,    -    .    /
0x08,0x04,0x04,0x04,0x04,0x04,0x04,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,
//0    1    2    3    4    5    6    7    8    9    :    ;    <    =    >    ?
0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x00,0x04,0x04,0x04,0x04,0x00,
//@    A    B    C    D    E    F    G    H    I    J    K    L    M    N    O
0x20,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
//P    Q    R    S    T    U    V    W    X    Y    Z    [    \    ]    ^    _
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x04,0x04,0x04,0x24,0x01,
//`    a    b    c    d    e    f    g    h    i    j    k    l    m    n    o
0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
//p    q    r    s    t    u    v    w    x    y    z    {    |    }    ~   DEL
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x04,0x04,0x04,0x04,0x00,
//Unicode
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x00,0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,
0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,
0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,
0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,
};
} // namespace characters

bool isNameChar(char c)
{
	return characters::types[c] & characters::Name;
}

bool isNameBegin(char c)
{
	return characters::types[c] & characters::NameBegin;
}

bool isTokenBegin(char c)
{
	return characters::types[c] & characters::TokenBegin;
}
} // namespace daedalus
#endif//Daedalus_CharType
